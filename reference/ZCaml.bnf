(*                        ZCaml                          *)
(************   OCaml language made easy    **************)


(*********************** ZCaml grammar *******************)
(************************* 改良版语法 *********************)
module ::= expr | blank



let-binding ::= lowercase-ident lowercase-ident* '=' expr # function definition or variable definition

expr ::= unary binoprhs
binoprhs ::= (op unary)*

unary ::= primary
| ('-'|'+') primary

primary ::= identexpr
| integerexpr
| boolexpr
| parenexpr 
| letexpr
| branchexpr

identexpr ::= ident_name args*  # function call or just a variable

args ::= parenexpr
| lowercaseident
| integerexpr
| boolexpr

parenexpr ::= '(' expr ')'

integerexpr ::= integer-literal
boolexpr ::= bool-literal

letexpr ::= defs ['in' expr]
defs ::= 'let' [ 'rec' ] let-binding { 'and' let-binding }

branchexpr ::= 'if' expr 'then' expr 'else' expr

(*********************** 以下主要用于词法 *********************)
op ::= 
| '+'                                               # AddOp
| '-'                                               # SubOp
| '*'                                               # MulOp
| '/'                                               # DivOp
| '='                                               # EqOp
| '<'                                               # LtOp
| '>'                                               # GtOp
| '<='                                              # LeOp
| '>='                                              # GeOp
| '<>'                                              # NeOp
| 'mod'                                             # ModOp
| '&&'                                              # AndOp
| '||'                                              # OrOp

eof ::= ';;' | EOF
integer-literal ::= [ '-' ]( digit ){ digit | '_' }
digit ::= '0-9'
lowercase-ident ::= ( 'a-z' | '_' ){ letter | digit | '_' }
capitalized-ident ::= ( 'A-Z' | '_' ){ letter | digit | '_' }
letter  ::=	'A-Z' | 'a-z'
(******************************* end grammar ***********************************)



(*********************** OCaml grammar *******************)
(************************ 没人看的语法 ********************)
expr ::= constant                                                   # ConstantExpr
| '(' expr ')'                                                      # ParenExpr
| expr { argument }+                                                # CallExpr
| expr infix-op expr                                                # BinaryExpr
| 'if' expr 'then' expr [ 'else' expr ]                             # CondExpr
| 'let' [ 'rec' ] let-binding { 'and' let-binding } 'in' expr       # LetBindingExpr
| lowercase-ident                                                   # ObjectExpr

let-binding ::= pattern '=' expr                   # LetPatternBinding
| value-name { parameter } '=' expr                # LetFunctionBinding 

parameter ::= pattern                              # Parameter

pattern ::= value-name                             # ValueNamePattern
| '_'                                              # DefaultPattern
| constant                                         # ConstantPattern
| pattern 'as' value-name                          # AsPattern
| '(' pattern ')'                                  # ParenPattern
| pattern '|' pattern                              # UnionPattern


value-name ::= lowercase-ident                     # LowercaseIdent
lowercase-ident ::= ( 'a-z' | '_' ){ letter | digit | '_' }
letter  ::=	'A-Z' | 'a-z'
object-expr ::= lowercase-ident                    # ObjectExpr
(******************************* end grammar ***********************************)