(*             v1                  *)
(* very simple ocaml language      *)
expr ::= constant                                  # ConstantExpr
| '(' expr ')'                                     # ParenExpr
| expr { argument }+                               # CallExpr
| expr infix-op expr                               # BinaryExpr
| 'if' expr 'then' expr [ 'else' expr ]            # CondExpr
| expr ';' expr                                    # SeqExpr
| 'let' [ 'rec' ] let-binding                      # LetExpr, LetRecExpr
| object-expr                                      # ObjectExpr

constant ::= integer-literal                       # IntegerLiteral
| 'false'                                          # FalseLiteral
| 'true'                                           # TrueLiteral
| '()'                                             # UnitLiteral

argument ::= expr                                  # Argument

integer-literal ::= [ '-' ]( digit ){ digit | '_' }

digit ::= '0-9'

infix-op ::= 
|'+'                                                # AddOp
| '-'                                               # SubOp
| '*'                                               # MulOp
| '/'                                               # DivOp
| '='                                               # EqOp
| '<'                                               # LtOp
| '>'                                               # GtOp
| '<='                                              # LeOp
| '>='                                              # GeOp
| '<>'                                              # NeOp

let-binding ::= pattern '=' expr                   # LetPatternBinding
| value-name { parameter } '=' expr                # LetFunctionBinding 

parameter ::= pattern                              # Parameter

pattern ::= value-name                             # ValueNamePattern
| '_'                                              # DefaultPattern
| constant                                         # ConstantPattern
| pattern 'as' value-name                          # AsPattern
| '(' pattern ')'                                  # ParenPattern
| pattern '|' pattern                              # UnionPattern


value-name ::= lowercase-ident                     # LowercaseIdent

lowercase-ident ::= ( 'a-z' | '_' ){ letter | digit | '_' | '\'' }

object-expr ::= lowercase-ident                    # ObjectExpr